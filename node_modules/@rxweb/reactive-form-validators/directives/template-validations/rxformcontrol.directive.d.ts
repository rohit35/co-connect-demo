import { ElementRef, OnInit, OnDestroy, Renderer2 } from '@angular/core';
import { Validator, AbstractControl, FormControl } from '@angular/forms';
import { BaseValidator } from './base-validator.directive';
import { DecimalProvider } from "../../domain/element-processor/decimal.provider";
import { AlphaConfig, BaseConfig, CompareConfig, ComposeConfig, ContainsConfig, CreditCardConfig, DateConfig, DefaultConfig, DigitConfig, EmailConfig, ExtensionConfig, FactorConfig, MessageConfig, NumberConfig, NumericConfig, PasswordConfig, RangeConfig, RequiredConfig, RuleConfig, SizeConfig, TimeConfig, DifferentConfig, RelationalOperatorConfig, UniqueConfig } from '../../models/config';
import * as ɵngcc0 from '@angular/core';
export declare class RxFormControlDirective extends BaseValidator implements OnInit, OnDestroy, Validator {
    private elementRef;
    private renderer;
    private decimalProvider;
    private eventListeners;
    private isNumericSubscribed;
    private isFocusCalled;
    private isMasked;
    validationControls: {
        [key: string]: FormControl;
    };
    alpha: AlphaConfig;
    alphaNumeric: AlphaConfig;
    ascii: BaseConfig;
    compare: CompareConfig;
    compose: ComposeConfig;
    contains: ContainsConfig;
    creditCard: CreditCardConfig;
    dataUri: BaseConfig;
    different: DifferentConfig;
    digit: DigitConfig;
    email: EmailConfig;
    endsWith: DefaultConfig;
    even: BaseConfig;
    extension: ExtensionConfig;
    factor: FactorConfig;
    fileSize: SizeConfig;
    greaterThanEqualTo: RelationalOperatorConfig;
    greaterThan: RelationalOperatorConfig;
    hexColor: MessageConfig;
    json: DefaultConfig;
    latitude: BaseConfig;
    latLong: BaseConfig;
    leapYear: BaseConfig;
    lessThan: RelationalOperatorConfig;
    lessThanEqualTo: RelationalOperatorConfig;
    longitude: BaseConfig;
    lowerCase: MessageConfig;
    mac: BaseConfig;
    maxDate: DateConfig;
    maxLength: NumberConfig;
    maxNumber: NumberConfig;
    minDate: DateConfig;
    minLength: NumberConfig;
    minNumber: NumberConfig;
    numeric: NumericConfig;
    odd: BaseConfig;
    password: PasswordConfig;
    port: BaseConfig;
    primeNumber: BaseConfig;
    required: RequiredConfig;
    range: RangeConfig;
    rule: RuleConfig;
    startsWith: DefaultConfig;
    time: TimeConfig;
    upperCase: MessageConfig;
    url: DefaultConfig;
    unique: UniqueConfig;
    notEmpty: BaseConfig;
    cusip: BaseConfig;
    grid: BaseConfig;
    date: BaseConfig;
    constructor(elementRef: ElementRef, renderer: Renderer2, decimalProvider: DecimalProvider);
    ngOnInit(): void;
    blurEvent(): void;
    bindNumericElementEvent(config?: NumericConfig): void;
    bindValueChangeEvent(): void;
    subscribeNumericFormatter(): void;
    subscribeMaskValidator(): void;
    private setValueOnElement;
    private setTemplateValidators;
    private updateOnElementClass;
    private setValidatorConfig;
    validate(control: AbstractControl): {
        [key: string]: any;
    };
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RxFormControlDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<RxFormControlDirective, "[ngModel],[formControlName],[formControl]", never, { "numeric": "numeric"; "alpha": "alpha"; "alphaNumeric": "alphaNumeric"; "ascii": "ascii"; "compare": "compare"; "compose": "compose"; "contains": "contains"; "creditCard": "creditCard"; "dataUri": "dataUri"; "different": "different"; "digit": "digit"; "email": "email"; "endsWith": "endsWith"; "even": "even"; "extension": "extension"; "factor": "factor"; "fileSize": "fileSize"; "greaterThanEqualTo": "greaterThanEqualTo"; "greaterThan": "greaterThan"; "hexColor": "hexColor"; "json": "json"; "latitude": "latitude"; "latLong": "latLong"; "leapYear": "leapYear"; "lessThan": "lessThan"; "lessThanEqualTo": "lessThanEqualTo"; "longitude": "longitude"; "lowerCase": "lowerCase"; "mac": "mac"; "maxDate": "maxDate"; "maxLength": "maxLength"; "maxNumber": "maxNumber"; "minDate": "minDate"; "minLength": "minLength"; "minNumber": "minNumber"; "odd": "odd"; "password": "password"; "port": "port"; "primeNumber": "primeNumber"; "required": "required"; "range": "range"; "rule": "rule"; "startsWith": "startsWith"; "time": "time"; "upperCase": "upperCase"; "url": "url"; "unique": "unique"; "notEmpty": "notEmpty"; "cusip": "cusip"; "grid": "grid"; "date": "date"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnhmb3JtY29udHJvbC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsicnhmb3JtY29udHJvbC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgT25Jbml0LCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBWYWxpZGF0b3IsIEFic3RyYWN0Q29udHJvbCwgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IEJhc2VWYWxpZGF0b3IgfSBmcm9tICcuL2Jhc2UtdmFsaWRhdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IERlY2ltYWxQcm92aWRlciB9IGZyb20gXCIuLi8uLi9kb21haW4vZWxlbWVudC1wcm9jZXNzb3IvZGVjaW1hbC5wcm92aWRlclwiO1xyXG5pbXBvcnQgeyBBbHBoYUNvbmZpZywgQmFzZUNvbmZpZywgQ29tcGFyZUNvbmZpZywgQ29tcG9zZUNvbmZpZywgQ29udGFpbnNDb25maWcsIENyZWRpdENhcmRDb25maWcsIERhdGVDb25maWcsIERlZmF1bHRDb25maWcsIERpZ2l0Q29uZmlnLCBFbWFpbENvbmZpZywgRXh0ZW5zaW9uQ29uZmlnLCBGYWN0b3JDb25maWcsIE1lc3NhZ2VDb25maWcsIE51bWJlckNvbmZpZywgTnVtZXJpY0NvbmZpZywgUGFzc3dvcmRDb25maWcsIFJhbmdlQ29uZmlnLCBSZXF1aXJlZENvbmZpZywgUnVsZUNvbmZpZywgU2l6ZUNvbmZpZywgVGltZUNvbmZpZywgRGlmZmVyZW50Q29uZmlnLCBSZWxhdGlvbmFsT3BlcmF0b3JDb25maWcsIFVuaXF1ZUNvbmZpZyB9IGZyb20gJy4uLy4uL21vZGVscy9jb25maWcnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSeEZvcm1Db250cm9sRGlyZWN0aXZlIGV4dGVuZHMgQmFzZVZhbGlkYXRvciBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBWYWxpZGF0b3Ige1xyXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xyXG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcclxuICAgIHByaXZhdGUgZGVjaW1hbFByb3ZpZGVyO1xyXG4gICAgcHJpdmF0ZSBldmVudExpc3RlbmVycztcclxuICAgIHByaXZhdGUgaXNOdW1lcmljU3Vic2NyaWJlZDtcclxuICAgIHByaXZhdGUgaXNGb2N1c0NhbGxlZDtcclxuICAgIHByaXZhdGUgaXNNYXNrZWQ7XHJcbiAgICB2YWxpZGF0aW9uQ29udHJvbHM6IHtcclxuICAgICAgICBba2V5OiBzdHJpbmddOiBGb3JtQ29udHJvbDtcclxuICAgIH07XHJcbiAgICBhbHBoYTogQWxwaGFDb25maWc7XHJcbiAgICBhbHBoYU51bWVyaWM6IEFscGhhQ29uZmlnO1xyXG4gICAgYXNjaWk6IEJhc2VDb25maWc7XHJcbiAgICBjb21wYXJlOiBDb21wYXJlQ29uZmlnO1xyXG4gICAgY29tcG9zZTogQ29tcG9zZUNvbmZpZztcclxuICAgIGNvbnRhaW5zOiBDb250YWluc0NvbmZpZztcclxuICAgIGNyZWRpdENhcmQ6IENyZWRpdENhcmRDb25maWc7XHJcbiAgICBkYXRhVXJpOiBCYXNlQ29uZmlnO1xyXG4gICAgZGlmZmVyZW50OiBEaWZmZXJlbnRDb25maWc7XHJcbiAgICBkaWdpdDogRGlnaXRDb25maWc7XHJcbiAgICBlbWFpbDogRW1haWxDb25maWc7XHJcbiAgICBlbmRzV2l0aDogRGVmYXVsdENvbmZpZztcclxuICAgIGV2ZW46IEJhc2VDb25maWc7XHJcbiAgICBleHRlbnNpb246IEV4dGVuc2lvbkNvbmZpZztcclxuICAgIGZhY3RvcjogRmFjdG9yQ29uZmlnO1xyXG4gICAgZmlsZVNpemU6IFNpemVDb25maWc7XHJcbiAgICBncmVhdGVyVGhhbkVxdWFsVG86IFJlbGF0aW9uYWxPcGVyYXRvckNvbmZpZztcclxuICAgIGdyZWF0ZXJUaGFuOiBSZWxhdGlvbmFsT3BlcmF0b3JDb25maWc7XHJcbiAgICBoZXhDb2xvcjogTWVzc2FnZUNvbmZpZztcclxuICAgIGpzb246IERlZmF1bHRDb25maWc7XHJcbiAgICBsYXRpdHVkZTogQmFzZUNvbmZpZztcclxuICAgIGxhdExvbmc6IEJhc2VDb25maWc7XHJcbiAgICBsZWFwWWVhcjogQmFzZUNvbmZpZztcclxuICAgIGxlc3NUaGFuOiBSZWxhdGlvbmFsT3BlcmF0b3JDb25maWc7XHJcbiAgICBsZXNzVGhhbkVxdWFsVG86IFJlbGF0aW9uYWxPcGVyYXRvckNvbmZpZztcclxuICAgIGxvbmdpdHVkZTogQmFzZUNvbmZpZztcclxuICAgIGxvd2VyQ2FzZTogTWVzc2FnZUNvbmZpZztcclxuICAgIG1hYzogQmFzZUNvbmZpZztcclxuICAgIG1heERhdGU6IERhdGVDb25maWc7XHJcbiAgICBtYXhMZW5ndGg6IE51bWJlckNvbmZpZztcclxuICAgIG1heE51bWJlcjogTnVtYmVyQ29uZmlnO1xyXG4gICAgbWluRGF0ZTogRGF0ZUNvbmZpZztcclxuICAgIG1pbkxlbmd0aDogTnVtYmVyQ29uZmlnO1xyXG4gICAgbWluTnVtYmVyOiBOdW1iZXJDb25maWc7XHJcbiAgICBudW1lcmljOiBOdW1lcmljQ29uZmlnO1xyXG4gICAgb2RkOiBCYXNlQ29uZmlnO1xyXG4gICAgcGFzc3dvcmQ6IFBhc3N3b3JkQ29uZmlnO1xyXG4gICAgcG9ydDogQmFzZUNvbmZpZztcclxuICAgIHByaW1lTnVtYmVyOiBCYXNlQ29uZmlnO1xyXG4gICAgcmVxdWlyZWQ6IFJlcXVpcmVkQ29uZmlnO1xyXG4gICAgcmFuZ2U6IFJhbmdlQ29uZmlnO1xyXG4gICAgcnVsZTogUnVsZUNvbmZpZztcclxuICAgIHN0YXJ0c1dpdGg6IERlZmF1bHRDb25maWc7XHJcbiAgICB0aW1lOiBUaW1lQ29uZmlnO1xyXG4gICAgdXBwZXJDYXNlOiBNZXNzYWdlQ29uZmlnO1xyXG4gICAgdXJsOiBEZWZhdWx0Q29uZmlnO1xyXG4gICAgdW5pcXVlOiBVbmlxdWVDb25maWc7XHJcbiAgICBub3RFbXB0eTogQmFzZUNvbmZpZztcclxuICAgIGN1c2lwOiBCYXNlQ29uZmlnO1xyXG4gICAgZ3JpZDogQmFzZUNvbmZpZztcclxuICAgIGRhdGU6IEJhc2VDb25maWc7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBkZWNpbWFsUHJvdmlkZXI6IERlY2ltYWxQcm92aWRlcik7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgYmx1ckV2ZW50KCk6IHZvaWQ7XHJcbiAgICBiaW5kTnVtZXJpY0VsZW1lbnRFdmVudChjb25maWc/OiBOdW1lcmljQ29uZmlnKTogdm9pZDtcclxuICAgIGJpbmRWYWx1ZUNoYW5nZUV2ZW50KCk6IHZvaWQ7XHJcbiAgICBzdWJzY3JpYmVOdW1lcmljRm9ybWF0dGVyKCk6IHZvaWQ7XHJcbiAgICBzdWJzY3JpYmVNYXNrVmFsaWRhdG9yKCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIHNldFZhbHVlT25FbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBzZXRUZW1wbGF0ZVZhbGlkYXRvcnM7XHJcbiAgICBwcml2YXRlIHVwZGF0ZU9uRWxlbWVudENsYXNzO1xyXG4gICAgcHJpdmF0ZSBzZXRWYWxpZGF0b3JDb25maWc7XHJcbiAgICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXTogYW55O1xyXG4gICAgfTtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbn1cclxuIl19