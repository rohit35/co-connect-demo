var FileControlDirective_1;
import * as tslib_1 from "tslib";
import { Input, Directive, forwardRef, ElementRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { APP_VALIDATORS } from "../../const/app-validators.const";
const VALIDATOR_CONFIG = "validatorConfig";
const FILE_VALIDATOR_NAMES = ["extension", "fileSize", "file"];
let FileControlDirective = FileControlDirective_1 = class FileControlDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isProcessed = false;
        this.validators = [];
        this.onChange = (_) => { };
        this.onTouched = () => { };
        this.element = elementRef.nativeElement;
    }
    onChangeCall(element) {
        let files = element.files;
        if (this.writeFile)
            this.onChange(files);
        else {
            if (files.length > 0)
                this.onChange(element.value);
            else
                this.onChange(undefined);
        }
    }
    writeValue(value) { }
    registerOnChange(invocation) { this.onChange = invocation; }
    registerOnTouched(invocation) { this.onTouched = invocation; }
    set extension(config) {
        this.pushValidator(FILE_VALIDATOR_NAMES[0], config);
    }
    set fileSize(config) {
        this.pushValidator(FILE_VALIDATOR_NAMES[1], config);
    }
    set file(config) {
        this.pushValidator(FILE_VALIDATOR_NAMES[2], config);
    }
    setConfig(control) {
        FILE_VALIDATOR_NAMES.forEach(t => {
            if (!this[t] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][t])
                this[t] = control[VALIDATOR_CONFIG][t];
        });
        this.isProcessed = true;
    }
    pushValidator(validatorName, config) {
        if (config)
            this.validators.push(APP_VALIDATORS[validatorName](config));
    }
    validate(control) {
        if (!this.isProcessed)
            this.setConfig(control);
        var result = null;
        for (var validator of this.validators) {
            result = validator(control, this.element.files);
            if (result)
                break;
        }
        return result;
    }
};
FileControlDirective.ctorParameters = () => [
    { type: ElementRef }
];
tslib_1.__decorate([
    Input()
], FileControlDirective.prototype, "writeFile", void 0);
tslib_1.__decorate([
    Input()
], FileControlDirective.prototype, "extension", null);
tslib_1.__decorate([
    Input()
], FileControlDirective.prototype, "fileSize", null);
tslib_1.__decorate([
    Input()
], FileControlDirective.prototype, "file", null);
FileControlDirective = FileControlDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "input[type=file]",
        host: {
            "(change)": "onChangeCall($event.target)",
            "(blur)": "onTouched()"
        },
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: FileControlDirective_1, multi: true }, {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => FileControlDirective_1),
                multi: true
            }]
    })
], FileControlDirective);
export { FileControlDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2ZpbGUtY29udHJvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBbUIsYUFBYSxFQUFhLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2xFLE1BQU0sZ0JBQWdCLEdBQUcsaUJBQWlCLENBQUM7QUFDM0MsTUFBTSxvQkFBb0IsR0FBYSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFhekUsSUFBYSxvQkFBb0IsNEJBQWpDLE1BQWEsb0JBQW9CO0lBdUM3QixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBcEMxQyxnQkFBVyxHQUFZLEtBQUssQ0FBQztRQUdyQixlQUFVLEdBQWUsRUFBRSxDQUFDO1FBRXBDLGFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLGNBQVMsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUErQmxCLElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLGFBQXFCLENBQUM7SUFDcEQsQ0FBQztJQTlCRCxZQUFZLENBQUMsT0FBeUI7UUFDbEMsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUMxQixJQUFJLElBQUksQ0FBQyxTQUFTO1lBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNwQjtZQUNELElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDO2dCQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzs7Z0JBRTdCLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDaEM7SUFDTCxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQUssSUFBSSxDQUFDO0lBQ3JCLGdCQUFnQixDQUFDLFVBQWUsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDakUsaUJBQWlCLENBQUMsVUFBZSxJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUcxRCxJQUFJLFNBQVMsQ0FBQyxNQUF1QjtRQUMxQyxJQUFJLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ3ZELENBQUM7SUFDUSxJQUFJLFFBQVEsQ0FBQyxNQUFrQjtRQUNwQyxJQUFJLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ3ZELENBQUM7SUFFUSxJQUFJLElBQUksQ0FBQyxNQUFrQjtRQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ3ZELENBQUM7SUFNRCxTQUFTLENBQUMsT0FBd0I7UUFDOUIsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztJQUM1QixDQUFDO0lBRUQsYUFBYSxDQUFDLGFBQXFCLEVBQUUsTUFBaUQ7UUFDbEYsSUFBSSxNQUFNO1lBQ04sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFDbkUsQ0FBQztJQUVELFFBQVEsQ0FBQyxPQUF3QjtRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVc7WUFDakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbEIsS0FBSyxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25DLE1BQU0sR0FBRyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEQsSUFBSSxNQUFNO2dCQUNOLE1BQU07U0FDYjtRQUNELE9BQU8sTUFBTSxDQUFBO0lBQ2pCLENBQUM7Q0FDSixDQUFBOztZQTVCbUMsVUFBVTs7QUFaakM7SUFBUixLQUFLLEVBQUU7dURBQW9CO0FBQ25CO0lBQVIsS0FBSyxFQUFFO3FEQUVQO0FBQ1E7SUFBUixLQUFLLEVBQUU7b0RBRVA7QUFFUTtJQUFSLEtBQUssRUFBRTtnREFFUDtBQXJDUSxvQkFBb0I7SUFaaEMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGtCQUFrQjtRQUM1QixJQUFJLEVBQUU7WUFDRixVQUFVLEVBQUUsNkJBQTZCO1lBQ3pDLFFBQVEsRUFBRSxhQUFhO1NBQzFCO1FBQ0QsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLHNCQUFvQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDeEYsT0FBTyxFQUFFLGFBQWE7Z0JBQ3RCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQW9CLENBQUM7Z0JBQ25ELEtBQUssRUFBRSxJQUFJO2FBQ2QsQ0FBQztLQUNMLENBQUM7R0FDVyxvQkFBb0IsQ0FtRWhDO1NBbkVZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUsIGZvcndhcmRSZWYsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBOR19WQUxJREFUT1JTLCBWYWxpZGF0b3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBFeHRlbnNpb25Db25maWcsIFNpemVDb25maWcsIEZpbGVDb25maWcgfSBmcm9tICcuLi8uLi9tb2RlbHMvY29uZmlnJ1xyXG5pbXBvcnQgeyBBUFBfVkFMSURBVE9SUyB9IGZyb20gXCIuLi8uLi9jb25zdC9hcHAtdmFsaWRhdG9ycy5jb25zdFwiO1xyXG5jb25zdCBWQUxJREFUT1JfQ09ORklHID0gXCJ2YWxpZGF0b3JDb25maWdcIjtcclxuY29uc3QgRklMRV9WQUxJREFUT1JfTkFNRVM6IHN0cmluZ1tdID0gW1wiZXh0ZW5zaW9uXCIsIFwiZmlsZVNpemVcIiwgXCJmaWxlXCJdO1xyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiBcImlucHV0W3R5cGU9ZmlsZV1cIixcclxuICAgIGhvc3Q6IHtcclxuICAgICAgICBcIihjaGFuZ2UpXCI6IFwib25DaGFuZ2VDYWxsKCRldmVudC50YXJnZXQpXCIsXHJcbiAgICAgICAgXCIoYmx1cilcIjogXCJvblRvdWNoZWQoKVwiXHJcbiAgICB9LFxyXG4gICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUiwgdXNlRXhpc3Rpbmc6IEZpbGVDb250cm9sRGlyZWN0aXZlLCBtdWx0aTogdHJ1ZSB9LCB7XHJcbiAgICAgICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcclxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBGaWxlQ29udHJvbERpcmVjdGl2ZSksXHJcbiAgICAgICAgbXVsdGk6IHRydWVcclxuICAgIH1dXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaWxlQ29udHJvbERpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XHJcbiAgICBmaWxlczogYW55O1xyXG4gICAgZWxlbWVudDogYW55XHJcbiAgICBpc1Byb2Nlc3NlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgXHJcblxyXG4gICAgcHJpdmF0ZSB2YWxpZGF0b3JzOiBGdW5jdGlvbltdID0gW107XHJcblxyXG4gICAgb25DaGFuZ2UgPSAoXykgPT4geyB9O1xyXG4gICAgb25Ub3VjaGVkID0gKCkgPT4geyB9O1xyXG5cclxuICAgIG9uQ2hhbmdlQ2FsbChlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50KSB7XHJcbiAgICAgICAgbGV0IGZpbGVzID0gZWxlbWVudC5maWxlcztcclxuICAgICAgICBpZiAodGhpcy53cml0ZUZpbGUpXHJcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoZmlsZXMpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoZWxlbWVudC52YWx1ZSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2UodW5kZWZpbmVkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZSkgeyB9XHJcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGludm9jYXRpb246IGFueSkgeyB0aGlzLm9uQ2hhbmdlID0gaW52b2NhdGlvbjsgfVxyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoaW52b2NhdGlvbjogYW55KSB7IHRoaXMub25Ub3VjaGVkID0gaW52b2NhdGlvbjsgfVxyXG5cclxuICAgIEBJbnB1dCgpIHdyaXRlRmlsZTogYm9vbGVhbjtcclxuICAgIEBJbnB1dCgpIHNldCBleHRlbnNpb24oY29uZmlnOiBFeHRlbnNpb25Db25maWcpIHtcclxuICAgICAgICB0aGlzLnB1c2hWYWxpZGF0b3IoRklMRV9WQUxJREFUT1JfTkFNRVNbMF0sIGNvbmZpZylcclxuICAgIH1cclxuICAgIEBJbnB1dCgpIHNldCBmaWxlU2l6ZShjb25maWc6IFNpemVDb25maWcpIHtcclxuICAgICAgICB0aGlzLnB1c2hWYWxpZGF0b3IoRklMRV9WQUxJREFUT1JfTkFNRVNbMV0sIGNvbmZpZylcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKSBzZXQgZmlsZShjb25maWc6IEZpbGVDb25maWcpIHtcclxuICAgICAgICB0aGlzLnB1c2hWYWxpZGF0b3IoRklMRV9WQUxJREFUT1JfTkFNRVNbMl0sIGNvbmZpZylcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgYXMgTm9kZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDb25maWcoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSB7XHJcbiAgICAgICAgRklMRV9WQUxJREFUT1JfTkFNRVMuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzW3RdICYmIGNvbnRyb2xbVkFMSURBVE9SX0NPTkZJR10gJiYgY29udHJvbFtWQUxJREFUT1JfQ09ORklHXVt0XSlcclxuICAgICAgICAgICAgICAgIHRoaXNbdF0gPSBjb250cm9sW1ZBTElEQVRPUl9DT05GSUddW3RdO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5pc1Byb2Nlc3NlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVzaFZhbGlkYXRvcih2YWxpZGF0b3JOYW1lOiBzdHJpbmcsIGNvbmZpZzogRXh0ZW5zaW9uQ29uZmlnIHwgU2l6ZUNvbmZpZyB8IEZpbGVDb25maWcpIHtcclxuICAgICAgICBpZiAoY29uZmlnKVxyXG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRvcnMucHVzaChBUFBfVkFMSURBVE9SU1t2YWxpZGF0b3JOYW1lXShjb25maWcpKVxyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgICAgIGlmICghdGhpcy5pc1Byb2Nlc3NlZClcclxuICAgICAgICAgICAgdGhpcy5zZXRDb25maWcoY29udHJvbCk7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgZm9yICh2YXIgdmFsaWRhdG9yIG9mIHRoaXMudmFsaWRhdG9ycykge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB2YWxpZGF0b3IoY29udHJvbCwgdGhpcy5lbGVtZW50LmZpbGVzKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdClcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICB9XHJcbn1cclxuIl19