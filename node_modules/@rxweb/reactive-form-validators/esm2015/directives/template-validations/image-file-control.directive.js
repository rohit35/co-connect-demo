var ImageFileControlDirective_1;
import * as tslib_1 from "tslib";
import { Input, Directive, forwardRef, ElementRef } from '@angular/core';
import { NG_ASYNC_VALIDATORS } from '@angular/forms';
import { APP_VALIDATORS } from "../../const/app-validators.const";
const VALIDATOR_CONFIG = "validatorConfig";
let ImageFileControlDirective = ImageFileControlDirective_1 = class ImageFileControlDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isProcessed = false;
        this.element = elementRef.nativeElement;
    }
    set image(config) {
        this.imageValidation = APP_VALIDATORS.image(config);
    }
    setConfig(control) {
        let image = "image";
        if (!this[image] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][image])
            this[image] = control[VALIDATOR_CONFIG][image];
        this.isProcessed = true;
    }
    validate(control) {
        if (!this.isProcessed)
            this.setConfig(control);
        if (this.imageValidation) {
            return this.imageValidation(control, this.element.files);
        }
        return new Promise((resolve, reject) => { resolve(null); });
    }
};
ImageFileControlDirective.ctorParameters = () => [
    { type: ElementRef }
];
tslib_1.__decorate([
    Input()
], ImageFileControlDirective.prototype, "image", null);
ImageFileControlDirective = ImageFileControlDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "input[type=file]",
        providers: [{
                provide: NG_ASYNC_VALIDATORS,
                useExisting: forwardRef(() => ImageFileControlDirective_1),
                multi: true
            }]
    })
], ImageFileControlDirective);
export { ImageFileControlDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtZmlsZS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2ltYWdlLWZpbGUtY29udHJvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBb0MsbUJBQW1CLEVBQWlCLE1BQU0sZ0JBQWdCLENBQUM7QUFFdEcsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2xFLE1BQU0sZ0JBQWdCLEdBQUcsaUJBQWlCLENBQUM7QUFTM0MsSUFBYSx5QkFBeUIsaUNBQXRDLE1BQWEseUJBQXlCO0lBVWxDLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFSMUMsZ0JBQVcsR0FBVyxLQUFLLENBQUM7UUFTeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsYUFBcUIsQ0FBQztJQUNwRCxDQUFDO0lBTlEsSUFBSSxLQUFLLENBQUMsTUFBa0I7UUFDbkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFNRCxTQUFTLENBQUMsT0FBdUI7UUFDN0IsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDO1FBQ3BCLElBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsS0FBSyxDQUFDO1lBQzlFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDO0lBRUQsUUFBUSxDQUFDLE9BQXdCO1FBQy9CLElBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVztZQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFCLElBQUcsSUFBSSxDQUFDLGVBQWUsRUFBQztZQUNwQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0Q7UUFDRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDN0QsQ0FBQztDQUNKLENBQUE7O1lBbkJtQyxVQUFVOztBQUpqQztJQUFSLEtBQUssRUFBRTtzREFFUDtBQVJRLHlCQUF5QjtJQVJyQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsa0JBQWtCO1FBQzVCLFNBQVMsRUFBRSxDQUFDO2dCQUNSLE9BQU8sRUFBRSxtQkFBbUI7Z0JBQzVCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsMkJBQXlCLENBQUM7Z0JBQ3hELEtBQUssRUFBRSxJQUFJO2FBQ2QsQ0FBQztLQUNMLENBQUM7R0FDVyx5QkFBeUIsQ0E2QnJDO1NBN0JZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5wdXQsIERpcmVjdGl2ZSAsZm9yd2FyZFJlZixFbGVtZW50UmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtWYWxpZGF0aW9uRXJyb3JzLCBBYnN0cmFjdENvbnRyb2wsIE5HX0FTWU5DX1ZBTElEQVRPUlMsQXN5bmNWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7SW1hZ2VDb25maWd9IGZyb20gJy4uLy4uL21vZGVscy9jb25maWcnXHJcbmltcG9ydCB7IEFQUF9WQUxJREFUT1JTIH0gZnJvbSBcIi4uLy4uL2NvbnN0L2FwcC12YWxpZGF0b3JzLmNvbnN0XCI7XHJcbmNvbnN0IFZBTElEQVRPUl9DT05GSUcgPSBcInZhbGlkYXRvckNvbmZpZ1wiO1xyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiBcImlucHV0W3R5cGU9ZmlsZV1cIixcclxuICAgIHByb3ZpZGVyczogW3tcclxuICAgICAgICBwcm92aWRlOiBOR19BU1lOQ19WQUxJREFUT1JTLFxyXG4gICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEltYWdlRmlsZUNvbnRyb2xEaXJlY3RpdmUpLFxyXG4gICAgICAgIG11bHRpOiB0cnVlXHJcbiAgICB9XVxyXG59KVxyXG5leHBvcnQgY2xhc3MgSW1hZ2VGaWxlQ29udHJvbERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFzeW5jVmFsaWRhdG9yICB7XHJcbiAgICBlbGVtZW50OmFueVxyXG4gICAgaXNQcm9jZXNzZWQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHByaXZhdGUgaW1hZ2VWYWxpZGF0aW9uOkZ1bmN0aW9uO1xyXG5cclxuICAgIEBJbnB1dCgpIHNldCBpbWFnZShjb25maWc6SW1hZ2VDb25maWcpe1xyXG4gICAgICB0aGlzLmltYWdlVmFsaWRhdGlvbiA9IEFQUF9WQUxJREFUT1JTLmltYWdlKGNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKXtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgYXMgTm9kZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDb25maWcoY29udHJvbDpBYnN0cmFjdENvbnRyb2wpe1xyXG4gICAgICAgIGxldCBpbWFnZSA9IFwiaW1hZ2VcIjtcclxuICAgICAgICBpZighdGhpc1tpbWFnZV0gJiYgY29udHJvbFtWQUxJREFUT1JfQ09ORklHXSAmJiBjb250cm9sW1ZBTElEQVRPUl9DT05GSUddW2ltYWdlXSlcclxuICAgICAgICAgIHRoaXNbaW1hZ2VdID0gY29udHJvbFtWQUxJREFUT1JfQ09ORklHXVtpbWFnZV07XHJcbiAgICAgIHRoaXMuaXNQcm9jZXNzZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFByb21pc2U8VmFsaWRhdGlvbkVycm9ycyB8IG51bGw+IHtcclxuICAgICAgaWYoIXRoaXMuaXNQcm9jZXNzZWQpXHJcbiAgICAgICAgdGhpcy5zZXRDb25maWcoY29udHJvbCk7XHJcbiAgICAgIGlmKHRoaXMuaW1hZ2VWYWxpZGF0aW9uKXtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmltYWdlVmFsaWRhdGlvbihjb250cm9sLHRoaXMuZWxlbWVudC5maWxlcyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsgcmVzb2x2ZShudWxsKTsgfSlcclxuICAgIH0gICAgXHJcbn1cclxuIl19