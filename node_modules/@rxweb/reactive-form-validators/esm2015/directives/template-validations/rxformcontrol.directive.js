import * as tslib_1 from "tslib";
import { Directive, Input, ElementRef, forwardRef, OnInit, OnDestroy, Renderer2 } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { APP_VALIDATORS } from '../../const/app-validators.const';
import { BaseValidator } from './base-validator.directive';
import { ELEMENT_VALUE, BLUR, FOCUS, BLANK } from "../../const";
import { TEMPLATE_VALIDATION_CONFIG, CONDITIONAL_VALIDATOR, VALIDATOR_CONFIG } from '../../const/app.const';
import { ApplicationUtil } from '../../util/app-util';
import { DecimalProvider } from "../../domain/element-processor/decimal.provider";
import { RegexValidator } from '../../util';
import { MaskProvider } from '../../domain/element-processor/mask.provider';
const NGMODEL_BINDING = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => RxFormControlDirective),
    multi: true
};
const ALLOW_VALIDATOR_WITHOUT_CONFIG = ['required', 'notEmpty', 'alpha', 'alphaNumeric', 'ascii', 'dataUri', 'digit', 'email', 'even', 'hexColor', 'json', 'latitude', 'latLong', 'leapYear', 'longitude', 'lowerCase', 'mac', 'odd', 'port', 'primeNumber', 'time', 'upperCase', 'url', 'unique', 'cusip', 'gird'];
const NUMERIC = "numeric";
const IS_FORMAT = "isFormat";
const DIGITS_INFO = "digitsInfo";
let RxFormControlDirective = class RxFormControlDirective extends BaseValidator {
    constructor(elementRef, renderer, decimalProvider) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.decimalProvider = decimalProvider;
        this.eventListeners = [];
        this.isNumericSubscribed = false;
        this.isFocusCalled = false;
        this.isMasked = false;
        this.element = elementRef.nativeElement;
        this.setEventName();
    }
    set validationControls(value) {
        this.controls = value;
    }
    get validationControls() {
        return this.controls;
    }
    ngOnInit() {
        let validators = [];
        Object.keys(APP_VALIDATORS).forEach(validatorName => {
            if ((this[validatorName]) || (ALLOW_VALIDATOR_WITHOUT_CONFIG.indexOf(validatorName) != -1 && this[validatorName] == BLANK)) {
                validators.push(APP_VALIDATORS[validatorName](this[validatorName]));
                if (this.name && !(this.formControlName && this.formControl)) {
                    ApplicationUtil.configureControl(this.controlConfig, this[validatorName], validatorName);
                }
            }
        });
        if (validators.length > 0)
            this.validators = validators;
        if (this.numeric && (this.numeric.isFormat || this.numeric.digitsInfo)) {
            this.bindNumericElementEvent();
        }
    }
    blurEvent() {
        if (!(this.formControl && this.formControl.errors && this.formControl.errors.numeric)) {
            let value = this.decimalProvider.transFormDecimal(this.formControl.value, this.numeric.digitsInfo);
            value = (!this.numeric.isFormat) ? this.decimalProvider.replacer(value) : value;
            this.setValueOnElement(value);
            this.isFocusCalled = false;
        }
    }
    bindNumericElementEvent(config) {
        if (config)
            this.numeric = config;
        let listener = this.renderer.listen(this.element, BLUR, this.blurEvent.bind(this));
        this.eventListeners.push(listener);
        listener = this.renderer.listen(this.element, FOCUS, (event) => {
            this.isFocusCalled = true;
            if (!(this.formControl && this.formControl.errors && this.formControl.errors.numeric) && this.formControl.value != null) {
                let value = this.decimalProvider.replacer(this.element.value);
                this.setValueOnElement(value);
            }
        });
        this.eventListeners.push(listener);
    }
    bindValueChangeEvent() {
        if (this.eventName != BLANK) {
            let listener = this.renderer.listen(this.element, this.eventName, () => {
                Object.keys(this.validationControls).forEach(fieldName => {
                    this.validationControls[fieldName].updateValueAndValidity();
                });
            });
            this.eventListeners.push(listener);
        }
    }
    subscribeNumericFormatter() {
        if (this.formControl[VALIDATOR_CONFIG] && this.formControl[VALIDATOR_CONFIG][NUMERIC] && (this.formControl[VALIDATOR_CONFIG][NUMERIC][IS_FORMAT] || this.formControl[VALIDATOR_CONFIG][NUMERIC][DIGITS_INFO])) {
            if (!this.isNumericSubscribed) {
                this.bindNumericElementEvent(this.formControl[VALIDATOR_CONFIG][NUMERIC]);
                this.isNumericSubscribed = true;
            }
            if (!this.isFocusCalled && RegexValidator.isNotBlank(this.formControl.value)) {
                this.blurEvent();
            }
        }
    }
    subscribeMaskValidator() {
        if (this.formControl[VALIDATOR_CONFIG] && this.formControl[VALIDATOR_CONFIG]["mask"] && !this.isMasked) {
            let config = this.formControl[VALIDATOR_CONFIG]["mask"];
            this.maskProvider = new MaskProvider(this.element, config.mask, this.renderer, this.formControl, config);
            this.isMasked = true;
        }
    }
    setValueOnElement(value) {
        this.renderer.setProperty(this.element, ELEMENT_VALUE, value);
    }
    setTemplateValidators(control) {
        for (let validatorName in control[VALIDATOR_CONFIG]) {
            this[validatorName] = control[VALIDATOR_CONFIG][validatorName];
        }
        delete control[TEMPLATE_VALIDATION_CONFIG];
        delete control[VALIDATOR_CONFIG];
        this.ngOnInit();
    }
    updateOnElementClass(element) {
        var previousClassName = '';
        return function (className) {
            if (previousClassName)
                element.classList.remove(previousClassName);
            if (className)
                element.classList.add(className);
            previousClassName = className;
        };
    }
    setValidatorConfig(control) {
        if (!this.formControl) {
            this.formControl = control;
            let rxFormControl = this.formControl;
            if (rxFormControl.updateOnElementClass)
                rxFormControl.updateOnElementClass = this.updateOnElementClass(this.element);
        }
        this.subscribeMaskValidator();
        this.subscribeNumericFormatter();
        if (control[TEMPLATE_VALIDATION_CONFIG])
            this.setTemplateValidators(control);
        if (control[CONDITIONAL_VALIDATOR]) {
            this.conditionalValidator = control[CONDITIONAL_VALIDATOR];
            delete control[CONDITIONAL_VALIDATOR];
        }
    }
    validate(control) {
        this.setValidatorConfig(control);
        if (this.conditionalValidator)
            this.conditionalValidator(control);
        if (!this.isProcessed)
            this.setModelConfig(control);
        return ((this.validators && this.validators.length > 0) || this.maskProvider) ? this.validation(control) : null;
    }
    ngOnDestroy() {
        this.controls = undefined;
        let eventCount = this.eventListeners.length;
        for (var i = 0; i < eventCount; i++) {
            this.eventListeners[0]();
            this.eventListeners.splice(0, 1);
        }
        this.eventListeners = [];
        if (this.maskProvider)
            this.maskProvider.onDestroy();
    }
};
RxFormControlDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: DecimalProvider }
];
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "alpha", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "alphaNumeric", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "ascii", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "compare", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "compose", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "contains", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "creditCard", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "dataUri", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "different", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "digit", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "email", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "endsWith", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "even", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "extension", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "factor", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "fileSize", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "greaterThanEqualTo", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "greaterThan", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "hexColor", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "json", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "latitude", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "latLong", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "leapYear", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "lessThan", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "lessThanEqualTo", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "longitude", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "lowerCase", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "mac", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "maxDate", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "maxLength", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "maxNumber", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "minDate", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "minLength", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "minNumber", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "numeric", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "odd", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "password", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "port", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "primeNumber", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "required", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "range", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "rule", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "startsWith", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "time", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "upperCase", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "url", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "unique", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "notEmpty", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "cusip", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "grid", void 0);
tslib_1.__decorate([
    Input()
], RxFormControlDirective.prototype, "date", void 0);
RxFormControlDirective = tslib_1.__decorate([
    Directive({
        selector: '[ngModel],[formControlName],[formControl]',
        providers: [NGMODEL_BINDING],
    })
], RxFormControlDirective);
export { RxFormControlDirective };
//# sourceMappingURL=data:application/json;base64,