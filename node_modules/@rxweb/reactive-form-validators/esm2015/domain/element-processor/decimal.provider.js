import * as tslib_1 from "tslib";
import { Injectable, Inject, LOCALE_ID } from "@angular/core";
import { getLocaleNumberSymbol, NumberSymbol } from "@angular/common";
import { DecimalPipe } from "@angular/common";
import { RegexValidator } from '../../util/regex-validator';
import { BLANK } from "../../const";
import { ReactiveFormConfig } from "../../util/reactive-form-config";
let DecimalProvider = class DecimalProvider {
    constructor(decimalPipe, localeId) {
        this.decimalPipe = decimalPipe;
        this.localeId = localeId;
        this.decimalSeperator = ".";
        this.groupSeperator = ",";
        this.isSetConfig = false;
        this.decimalSeperator = getLocaleNumberSymbol(localeId, NumberSymbol.Decimal);
        ;
        this.groupSeperator = getLocaleNumberSymbol(localeId, NumberSymbol.Group);
        this.setSymbolInConfig();
    }
    replacer(value) {
        value = String(value);
        if (!this.isSetConfig)
            this.bindConfig();
        value = value.split(this.groupSeperator).join(BLANK);
        if (this.allowDecimalSymbol)
            value = value.replace(this.decimalSeperator, this.allowDecimalSymbol);
        var splitValue = value.split(this.decimalSeperator);
        value = (splitValue.length > 1 && splitValue[1] && RegexValidator.isZero(splitValue[1])) ? splitValue[0] : value;
        return value;
    }
    transFormDecimal(value, digitsInfo) {
        value = String(value);
        if (!value) {
            return value;
        }
        return this.decimalPipe.transform(value.replace(ReactiveFormConfig.number.groupSymbol, "").replace(this.decimalSeperator, "."), digitsInfo, this.localeId);
    }
    setSymbolInConfig() {
        ReactiveFormConfig.number = { decimalSymbol: this.decimalSeperator, groupSymbol: this.groupSeperator };
    }
    bindConfig() {
        if (ReactiveFormConfig.json) {
            if (ReactiveFormConfig.json.localeId)
                this.localeId = ReactiveFormConfig.json.localeId;
            if (ReactiveFormConfig.json.allowDecimalSymbol)
                this.allowDecimalSymbol = ReactiveFormConfig.json.allowDecimalSymbol;
        }
        this.isSetConfig = true;
    }
};
DecimalProvider.ctorParameters = () => [
    { type: DecimalPipe },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
DecimalProvider = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(1, Inject(LOCALE_ID))
], DecimalProvider);
export { DecimalProvider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjaW1hbC5wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJkb21haW4vZWxlbWVudC1wcm9jZXNzb3IvZGVjaW1hbC5wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQzdELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUNyRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFDN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzVELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFDbkMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFJckUsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtJQUl4QixZQUNZLFdBQXdCLEVBQTZCLFFBQWdCO1FBQXJFLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQTZCLGFBQVEsR0FBUixRQUFRLENBQVE7UUFKekUscUJBQWdCLEdBQVcsR0FBRyxDQUFDO1FBQy9CLG1CQUFjLEdBQVcsR0FBRyxDQUFDO1FBNEM3QixnQkFBVyxHQUFZLEtBQUssQ0FBQztRQXZDakMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFBQSxDQUFDO1FBQy9FLElBQUksQ0FBQyxjQUFjLEdBQUcscUJBQXFCLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQVU7UUFDZixLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVztZQUNqQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdEIsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRCxJQUFJLElBQUksQ0FBQyxrQkFBa0I7WUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1FBQ3pFLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDcEQsS0FBSyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDakgsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELGdCQUFnQixDQUFDLEtBQVUsRUFBRSxVQUFrQjtRQUMzQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUNELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqSyxDQUFDO0lBRU8saUJBQWlCO1FBQ3JCLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMzRyxDQUFDO0lBRUQsVUFBVTtRQUNOLElBQUksa0JBQWtCLENBQUMsSUFBSSxFQUFFO1lBQ3pCLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVE7Z0JBQ2hDLElBQUksQ0FBQyxRQUFRLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNyRCxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxrQkFBa0I7Z0JBQzFDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUM7U0FDNUU7UUFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztJQUM1QixDQUFDO0NBR0osQ0FBQTs7WUExQzRCLFdBQVc7eUNBQUcsTUFBTSxTQUFDLFNBQVM7O0FBTDlDLGVBQWU7SUFEM0IsVUFBVSxFQUFFO0lBTThCLG1CQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtHQUwvQyxlQUFlLENBK0MzQjtTQS9DWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBMT0NBTEVfSUQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiXHJcbmltcG9ydCB7IGdldExvY2FsZU51bWJlclN5bWJvbCwgTnVtYmVyU3ltYm9sIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiXHJcbmltcG9ydCB7IERlY2ltYWxQaXBlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiXHJcbmltcG9ydCB7IFJlZ2V4VmFsaWRhdG9yIH0gZnJvbSAnLi4vLi4vdXRpbC9yZWdleC12YWxpZGF0b3InO1xyXG5pbXBvcnQgeyBCTEFOSyB9IGZyb20gXCIuLi8uLi9jb25zdFwiXHJcbmltcG9ydCB7IFJlYWN0aXZlRm9ybUNvbmZpZyB9IGZyb20gXCIuLi8uLi91dGlsL3JlYWN0aXZlLWZvcm0tY29uZmlnXCI7XHJcblxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGVjaW1hbFByb3ZpZGVyIHtcclxuICAgIHByaXZhdGUgZGVjaW1hbFNlcGVyYXRvcjogc3RyaW5nID0gXCIuXCI7XHJcbiAgICBwcml2YXRlIGdyb3VwU2VwZXJhdG9yOiBzdHJpbmcgPSBcIixcIjtcclxuICAgIHByaXZhdGUgYWxsb3dEZWNpbWFsU3ltYm9sOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGRlY2ltYWxQaXBlOiBEZWNpbWFsUGlwZSwgQEluamVjdChMT0NBTEVfSUQpIHByaXZhdGUgbG9jYWxlSWQ6IHN0cmluZ1xyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5kZWNpbWFsU2VwZXJhdG9yID0gZ2V0TG9jYWxlTnVtYmVyU3ltYm9sKGxvY2FsZUlkLCBOdW1iZXJTeW1ib2wuRGVjaW1hbCk7O1xyXG4gICAgICAgIHRoaXMuZ3JvdXBTZXBlcmF0b3IgPSBnZXRMb2NhbGVOdW1iZXJTeW1ib2wobG9jYWxlSWQsIE51bWJlclN5bWJvbC5Hcm91cCk7XHJcbiAgICAgICAgdGhpcy5zZXRTeW1ib2xJbkNvbmZpZygpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlcGxhY2VyKHZhbHVlOiBhbnkpOiBhbnkge1xyXG4gICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcclxuICAgICAgICBpZiAoIXRoaXMuaXNTZXRDb25maWcpXHJcbiAgICAgICAgICAgIHRoaXMuYmluZENvbmZpZygpO1xyXG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3BsaXQodGhpcy5ncm91cFNlcGVyYXRvcikuam9pbihCTEFOSyk7XHJcbiAgICAgICAgaWYgKHRoaXMuYWxsb3dEZWNpbWFsU3ltYm9sKVxyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UodGhpcy5kZWNpbWFsU2VwZXJhdG9yLCB0aGlzLmFsbG93RGVjaW1hbFN5bWJvbClcclxuICAgICAgICB2YXIgc3BsaXRWYWx1ZSA9IHZhbHVlLnNwbGl0KHRoaXMuZGVjaW1hbFNlcGVyYXRvcik7XHJcbiAgICAgICAgdmFsdWUgPSAoc3BsaXRWYWx1ZS5sZW5ndGggPiAxICYmIHNwbGl0VmFsdWVbMV0gJiYgUmVnZXhWYWxpZGF0b3IuaXNaZXJvKHNwbGl0VmFsdWVbMV0pKSA/IHNwbGl0VmFsdWVbMF0gOiB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNGb3JtRGVjaW1hbCh2YWx1ZTogYW55LCBkaWdpdHNJbmZvOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjaW1hbFBpcGUudHJhbnNmb3JtKHZhbHVlLnJlcGxhY2UoUmVhY3RpdmVGb3JtQ29uZmlnLm51bWJlci5ncm91cFN5bWJvbCwgICBcIlwiKS5yZXBsYWNlKHRoaXMuZGVjaW1hbFNlcGVyYXRvciwgXCIuXCIpLCBkaWdpdHNJbmZvLCB0aGlzLmxvY2FsZUlkKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldFN5bWJvbEluQ29uZmlnKCkge1xyXG4gICAgICAgIFJlYWN0aXZlRm9ybUNvbmZpZy5udW1iZXIgPSB7IGRlY2ltYWxTeW1ib2w6IHRoaXMuZGVjaW1hbFNlcGVyYXRvciwgZ3JvdXBTeW1ib2w6IHRoaXMuZ3JvdXBTZXBlcmF0b3IgfTtcclxuICAgIH1cclxuXHJcbiAgICBiaW5kQ29uZmlnKCkge1xyXG4gICAgICAgIGlmIChSZWFjdGl2ZUZvcm1Db25maWcuanNvbikge1xyXG4gICAgICAgICAgICBpZiAoUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24ubG9jYWxlSWQpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZUlkID0gUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24ubG9jYWxlSWQ7XHJcbiAgICAgICAgICAgIGlmIChSZWFjdGl2ZUZvcm1Db25maWcuanNvbi5hbGxvd0RlY2ltYWxTeW1ib2wpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsbG93RGVjaW1hbFN5bWJvbCA9IFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uLmFsbG93RGVjaW1hbFN5bWJvbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pc1NldENvbmZpZyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc1NldENvbmZpZzogYm9vbGVhbiA9IGZhbHNlO1xyXG59XHJcbiJdfQ==