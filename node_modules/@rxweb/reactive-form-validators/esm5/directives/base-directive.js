import * as tslib_1 from "tslib";
import { Input } from "@angular/core";
import { defaultContainer } from "../core/defaultContainer";
import { OBJECT_PROPERTY, PROPERTY } from "../const";
import { ApplicationUtil } from "../util/app-util";
import { TEMPLATE_VALIDATION_CONFIG } from '../const/app.const';
var BaseDirective = /** @class */ (function () {
    function BaseDirective() {
    }
    BaseDirective.prototype.applyValidations = function (controls, model) {
        var _this = this;
        if (model === void 0) { model = null; }
        if (this.model) {
            var modelConfig_1 = defaultContainer.get(model || this.model.constructor);
            if (modelConfig_1) {
                modelConfig_1.properties.forEach(function (property) {
                    if (controls[property.name]) {
                        switch (property.propertyType) {
                            case PROPERTY:
                                _this.setValidatorConfig(controls[property.name], modelConfig_1, property);
                                break;
                            case OBJECT_PROPERTY:
                                _this.applyValidations(controls[property.name].controls, property.entity);
                                break;
                        }
                    }
                });
            }
        }
    };
    BaseDirective.prototype.setValidatorConfig = function (control, modelConfig, property) {
        var annotations = modelConfig.propertyAnnotations.filter(function (t) { return t.propertyName == property.name; });
        annotations.forEach(function (annotation) {
            if (!control[TEMPLATE_VALIDATION_CONFIG])
                control[TEMPLATE_VALIDATION_CONFIG] = {};
            ApplicationUtil.configureControl(control, annotation.config ? annotation.config : "", annotation.annotationType);
        });
    };
    tslib_1.__decorate([
        Input()
    ], BaseDirective.prototype, "model", void 0);
    return BaseDirective;
}());
export { BaseDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy9iYXNlLWRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV0QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUMxRCxPQUFPLEVBQUcsZUFBZSxFQUFFLFFBQVEsRUFBQyxNQUFNLFVBQVUsQ0FBQTtBQUVwRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbkQsT0FBTyxFQUFFLDBCQUEwQixFQUFHLE1BQU0sb0JBQW9CLENBQUE7QUFDaEU7SUFBQTtJQStCQSxDQUFDO0lBNUJHLHdDQUFnQixHQUFoQixVQUFpQixRQUFZLEVBQUMsS0FBZ0I7UUFBOUMsaUJBa0JDO1FBbEI2QixzQkFBQSxFQUFBLFlBQWdCO1FBQzFDLElBQUcsSUFBSSxDQUFDLEtBQUssRUFBQztZQUNWLElBQUksYUFBVyxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN4RSxJQUFHLGFBQVcsRUFBQztnQkFDWCxhQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFBLFFBQVE7b0JBQ25DLElBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBQzt3QkFDM0IsUUFBTyxRQUFRLENBQUMsWUFBWSxFQUFFOzRCQUMxQixLQUFLLFFBQVE7Z0NBQ1QsS0FBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUMsYUFBVyxFQUFDLFFBQVEsQ0FBQyxDQUFDO2dDQUMxRSxNQUFNOzRCQUNOLEtBQUssZUFBZTtnQ0FDaEIsS0FBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQ0FDNUUsTUFBTTt5QkFDVDtxQkFDSjtnQkFDRCxDQUFDLENBQUMsQ0FBQTthQUNMO1NBQ0o7SUFDTCxDQUFDO0lBRU8sMENBQWtCLEdBQTFCLFVBQTJCLE9BQXVCLEVBQUMsV0FBNkIsRUFBQyxRQUFxQjtRQUNsRyxJQUFJLFdBQVcsR0FBRSxXQUFXLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFHLE9BQUEsQ0FBQyxDQUFDLFlBQVksSUFBSSxRQUFRLENBQUMsSUFBSSxFQUEvQixDQUErQixDQUFDLENBQUM7UUFDN0YsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFBLFVBQVU7WUFDMUIsSUFBRyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztnQkFDdkMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3pDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUNwSCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUE3QlE7UUFBUixLQUFLLEVBQUU7Z0RBQVc7SUE4QnZCLG9CQUFDO0NBQUEsQUEvQkQsSUErQkM7U0EvQnFCLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiXHJcbmltcG9ydCB7ZGVmYXVsdENvbnRhaW5lciB9IGZyb20gXCIuLi9jb3JlL2RlZmF1bHRDb250YWluZXJcIlxyXG5pbXBvcnQgeyAgT0JKRUNUX1BST1BFUlRZLCBQUk9QRVJUWX0gZnJvbSBcIi4uL2NvbnN0XCJcclxuaW1wb3J0IHsgIEluc3RhbmNlQ29udGFpbmVyLCBQcm9wZXJ0eUluZm8gfSBmcm9tICcuLi9jb3JlL3ZhbGlkYXRvci5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBBcHBsaWNhdGlvblV0aWwgfSBmcm9tIFwiLi4vdXRpbC9hcHAtdXRpbFwiO1xyXG5pbXBvcnQgeyBURU1QTEFURV9WQUxJREFUSU9OX0NPTkZJRyAgfSBmcm9tICcuLi9jb25zdC9hcHAuY29uc3QnXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlRGlyZWN0aXZlIHtcclxuICAgIEBJbnB1dCgpIG1vZGVsOmFueTtcclxuICAgIFxyXG4gICAgYXBwbHlWYWxpZGF0aW9ucyhjb250cm9sczphbnksbW9kZWw6YW55ID0gbnVsbCl7XHJcbiAgICAgICAgaWYodGhpcy5tb2RlbCl7XHJcbiAgICAgICAgICAgIGxldCBtb2RlbENvbmZpZyA9IGRlZmF1bHRDb250YWluZXIuZ2V0KG1vZGVsIHx8IHRoaXMubW9kZWwuY29uc3RydWN0b3IpO1xyXG4gICAgICAgICAgICBpZihtb2RlbENvbmZpZyl7XHJcbiAgICAgICAgICAgICAgICBtb2RlbENvbmZpZy5wcm9wZXJ0aWVzLmZvckVhY2gocHJvcGVydHkgPT57XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY29udHJvbHNbcHJvcGVydHkubmFtZV0pe1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaChwcm9wZXJ0eS5wcm9wZXJ0eVR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBQUk9QRVJUWTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsaWRhdG9yQ29uZmlnKGNvbnRyb2xzW3Byb3BlcnR5Lm5hbWVdLG1vZGVsQ29uZmlnLHByb3BlcnR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgT0JKRUNUX1BST1BFUlRZOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBseVZhbGlkYXRpb25zKGNvbnRyb2xzW3Byb3BlcnR5Lm5hbWVdLmNvbnRyb2xzLHByb3BlcnR5LmVudGl0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRWYWxpZGF0b3JDb25maWcoY29udHJvbDpBYnN0cmFjdENvbnRyb2wsbW9kZWxDb25maWc6SW5zdGFuY2VDb250YWluZXIscHJvcGVydHk6UHJvcGVydHlJbmZvKXtcclxuICAgICAgICBsZXQgYW5ub3RhdGlvbnM9IG1vZGVsQ29uZmlnLnByb3BlcnR5QW5ub3RhdGlvbnMuZmlsdGVyKHQ9PiB0LnByb3BlcnR5TmFtZSA9PSBwcm9wZXJ0eS5uYW1lKTtcclxuICAgICAgICBhbm5vdGF0aW9ucy5mb3JFYWNoKGFubm90YXRpb24gPT57XHJcbiAgICAgICAgICAgIGlmKCFjb250cm9sW1RFTVBMQVRFX1ZBTElEQVRJT05fQ09ORklHXSlcclxuICAgICAgICAgICAgY29udHJvbFtURU1QTEFURV9WQUxJREFUSU9OX0NPTkZJR10gPSB7fTtcclxuICAgICAgICAgICAgQXBwbGljYXRpb25VdGlsLmNvbmZpZ3VyZUNvbnRyb2woY29udHJvbCwgYW5ub3RhdGlvbi5jb25maWcgPyBhbm5vdGF0aW9uLmNvbmZpZyA6IFwiXCIsIGFubm90YXRpb24uYW5ub3RhdGlvblR5cGUpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG4iXX0=