import * as tslib_1 from "tslib";
import { Input, Directive, forwardRef, ElementRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { APP_VALIDATORS } from "../../const/app-validators.const";
var VALIDATOR_CONFIG = "validatorConfig";
var FILE_VALIDATOR_NAMES = ["extension", "fileSize", "file"];
var FileControlDirective = /** @class */ (function () {
    function FileControlDirective(elementRef) {
        this.elementRef = elementRef;
        this.isProcessed = false;
        this.validators = [];
        this.onChange = function (_) { };
        this.onTouched = function () { };
        this.element = elementRef.nativeElement;
    }
    FileControlDirective_1 = FileControlDirective;
    FileControlDirective.prototype.onChangeCall = function (element) {
        var files = element.files;
        if (this.writeFile)
            this.onChange(files);
        else {
            if (files.length > 0)
                this.onChange(element.value);
            else
                this.onChange(undefined);
        }
    };
    FileControlDirective.prototype.writeValue = function (value) { };
    FileControlDirective.prototype.registerOnChange = function (invocation) { this.onChange = invocation; };
    FileControlDirective.prototype.registerOnTouched = function (invocation) { this.onTouched = invocation; };
    Object.defineProperty(FileControlDirective.prototype, "extension", {
        set: function (config) {
            this.pushValidator(FILE_VALIDATOR_NAMES[0], config);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileControlDirective.prototype, "fileSize", {
        set: function (config) {
            this.pushValidator(FILE_VALIDATOR_NAMES[1], config);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileControlDirective.prototype, "file", {
        set: function (config) {
            this.pushValidator(FILE_VALIDATOR_NAMES[2], config);
        },
        enumerable: true,
        configurable: true
    });
    FileControlDirective.prototype.setConfig = function (control) {
        var _this = this;
        FILE_VALIDATOR_NAMES.forEach(function (t) {
            if (!_this[t] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][t])
                _this[t] = control[VALIDATOR_CONFIG][t];
        });
        this.isProcessed = true;
    };
    FileControlDirective.prototype.pushValidator = function (validatorName, config) {
        if (config)
            this.validators.push(APP_VALIDATORS[validatorName](config));
    };
    FileControlDirective.prototype.validate = function (control) {
        var e_1, _a;
        if (!this.isProcessed)
            this.setConfig(control);
        var result = null;
        try {
            for (var _b = tslib_1.__values(this.validators), _c = _b.next(); !_c.done; _c = _b.next()) {
                var validator = _c.value;
                result = validator(control, this.element.files);
                if (result)
                    break;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
    };
    var FileControlDirective_1;
    FileControlDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    tslib_1.__decorate([
        Input()
    ], FileControlDirective.prototype, "writeFile", void 0);
    tslib_1.__decorate([
        Input()
    ], FileControlDirective.prototype, "extension", null);
    tslib_1.__decorate([
        Input()
    ], FileControlDirective.prototype, "fileSize", null);
    tslib_1.__decorate([
        Input()
    ], FileControlDirective.prototype, "file", null);
    FileControlDirective = FileControlDirective_1 = tslib_1.__decorate([
        Directive({
            selector: "input[type=file]",
            host: {
                "(change)": "onChangeCall($event.target)",
                "(blur)": "onTouched()"
            },
            providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: FileControlDirective_1, multi: true }, {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return FileControlDirective_1; }),
                    multi: true
                }]
        })
    ], FileControlDirective);
    return FileControlDirective;
}());
export { FileControlDirective };
//# sourceMappingURL=data:application/json;base64,