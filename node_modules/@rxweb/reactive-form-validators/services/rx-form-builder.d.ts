import { FormGroup, FormArray, ValidatorFn, AsyncValidatorFn } from "@angular/forms";
import { Type } from "../util";
import { BaseFormBuilder } from './base-form-builder';
import { FormBuilderConfiguration } from "../models";
import { RxFormGroup } from './rx-form-group';
import { AppFormGroup } from '../models/interface/i-form-group';
import { IAbstractControl } from "../models/interface/i-abstract-control";
import * as ɵngcc0 from '@angular/core';
export declare class RxFormBuilder extends BaseFormBuilder {
    private nestedProp;
    private conditionalObjectProps;
    private conditionalValidationInstance;
    private builderConfigurationConditionalObjectProps;
    private formGroupPropOtherValidator;
    private currentFormGroupPropOtherValidator;
    private isNested;
    private isGroupCalled;
    private isNestedBinding;
    constructor();
    private getInstanceContainer;
    private setValue;
    private extractExpressions;
    private addAsyncValidation;
    private addFormControl;
    private additionalValidation;
    private getEntity;
    private getObjectPropertyInstance;
    private checkObjectPropAdditionalValidation;
    private getObject;
    control(value?: any, validators?: ValidatorFn[], asyncValidators?: AsyncValidatorFn[]): IAbstractControl;
    array(values: [{
        [key: string]: any;
    }], validatorConfig?: FormBuilderConfiguration): FormArray;
    group(groupObject: {
        [key: string]: any;
    }, validatorConfig?: FormBuilderConfiguration): FormGroup;
    private applyAllPropValidator;
    private dynamicValidationPropCheck;
    private isNotObject;
    private createValidatorFormGroup;
    private getValidatorConfig;
    private getProps;
    formGroup<T>(model: Type<T> | {
        [key: string]: any;
    }, entityObject?: {
        [key: string]: any;
    } | FormBuilderConfiguration, formBuilderConfiguration?: FormBuilderConfiguration): RxFormGroup | FormGroup | AppFormGroup<T>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RxFormBuilder, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<RxFormBuilder>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtZm9ybS1idWlsZGVyLmQudHMiLCJzb3VyY2VzIjpbInJ4LWZvcm0tYnVpbGRlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1BcnJheSwgVmFsaWRhdG9yRm4sIEFzeW5jVmFsaWRhdG9yRm4gfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuaW1wb3J0IHsgVHlwZSB9IGZyb20gXCIuLi91dGlsXCI7XHJcbmltcG9ydCB7IEJhc2VGb3JtQnVpbGRlciB9IGZyb20gJy4vYmFzZS1mb3JtLWJ1aWxkZXInO1xyXG5pbXBvcnQgeyBGb3JtQnVpbGRlckNvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi4vbW9kZWxzXCI7XHJcbmltcG9ydCB7IFJ4Rm9ybUdyb3VwIH0gZnJvbSAnLi9yeC1mb3JtLWdyb3VwJztcclxuaW1wb3J0IHsgQXBwRm9ybUdyb3VwIH0gZnJvbSAnLi4vbW9kZWxzL2ludGVyZmFjZS9pLWZvcm0tZ3JvdXAnO1xyXG5pbXBvcnQgeyBJQWJzdHJhY3RDb250cm9sIH0gZnJvbSBcIi4uL21vZGVscy9pbnRlcmZhY2UvaS1hYnN0cmFjdC1jb250cm9sXCI7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFJ4Rm9ybUJ1aWxkZXIgZXh0ZW5kcyBCYXNlRm9ybUJ1aWxkZXIge1xyXG4gICAgcHJpdmF0ZSBuZXN0ZWRQcm9wO1xyXG4gICAgcHJpdmF0ZSBjb25kaXRpb25hbE9iamVjdFByb3BzO1xyXG4gICAgcHJpdmF0ZSBjb25kaXRpb25hbFZhbGlkYXRpb25JbnN0YW5jZTtcclxuICAgIHByaXZhdGUgYnVpbGRlckNvbmZpZ3VyYXRpb25Db25kaXRpb25hbE9iamVjdFByb3BzO1xyXG4gICAgcHJpdmF0ZSBmb3JtR3JvdXBQcm9wT3RoZXJWYWxpZGF0b3I7XHJcbiAgICBwcml2YXRlIGN1cnJlbnRGb3JtR3JvdXBQcm9wT3RoZXJWYWxpZGF0b3I7XHJcbiAgICBwcml2YXRlIGlzTmVzdGVkO1xyXG4gICAgcHJpdmF0ZSBpc0dyb3VwQ2FsbGVkO1xyXG4gICAgcHJpdmF0ZSBpc05lc3RlZEJpbmRpbmc7XHJcbiAgICBjb25zdHJ1Y3RvcigpO1xyXG4gICAgcHJpdmF0ZSBnZXRJbnN0YW5jZUNvbnRhaW5lcjtcclxuICAgIHByaXZhdGUgc2V0VmFsdWU7XHJcbiAgICBwcml2YXRlIGV4dHJhY3RFeHByZXNzaW9ucztcclxuICAgIHByaXZhdGUgYWRkQXN5bmNWYWxpZGF0aW9uO1xyXG4gICAgcHJpdmF0ZSBhZGRGb3JtQ29udHJvbDtcclxuICAgIHByaXZhdGUgYWRkaXRpb25hbFZhbGlkYXRpb247XHJcbiAgICBwcml2YXRlIGdldEVudGl0eTtcclxuICAgIHByaXZhdGUgZ2V0T2JqZWN0UHJvcGVydHlJbnN0YW5jZTtcclxuICAgIHByaXZhdGUgY2hlY2tPYmplY3RQcm9wQWRkaXRpb25hbFZhbGlkYXRpb247XHJcbiAgICBwcml2YXRlIGdldE9iamVjdDtcclxuICAgIGNvbnRyb2wodmFsdWU/OiBhbnksIHZhbGlkYXRvcnM/OiBWYWxpZGF0b3JGbltdLCBhc3luY1ZhbGlkYXRvcnM/OiBBc3luY1ZhbGlkYXRvckZuW10pOiBJQWJzdHJhY3RDb250cm9sO1xyXG4gICAgYXJyYXkodmFsdWVzOiBbe1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcclxuICAgIH1dLCB2YWxpZGF0b3JDb25maWc/OiBGb3JtQnVpbGRlckNvbmZpZ3VyYXRpb24pOiBGb3JtQXJyYXk7XHJcbiAgICBncm91cChncm91cE9iamVjdDoge1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcclxuICAgIH0sIHZhbGlkYXRvckNvbmZpZz86IEZvcm1CdWlsZGVyQ29uZmlndXJhdGlvbik6IEZvcm1Hcm91cDtcclxuICAgIHByaXZhdGUgYXBwbHlBbGxQcm9wVmFsaWRhdG9yO1xyXG4gICAgcHJpdmF0ZSBkeW5hbWljVmFsaWRhdGlvblByb3BDaGVjaztcclxuICAgIHByaXZhdGUgaXNOb3RPYmplY3Q7XHJcbiAgICBwcml2YXRlIGNyZWF0ZVZhbGlkYXRvckZvcm1Hcm91cDtcclxuICAgIHByaXZhdGUgZ2V0VmFsaWRhdG9yQ29uZmlnO1xyXG4gICAgcHJpdmF0ZSBnZXRQcm9wcztcclxuICAgIGZvcm1Hcm91cDxUPihtb2RlbDogVHlwZTxUPiB8IHtcclxuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XHJcbiAgICB9LCBlbnRpdHlPYmplY3Q/OiB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXTogYW55O1xyXG4gICAgfSB8IEZvcm1CdWlsZGVyQ29uZmlndXJhdGlvbiwgZm9ybUJ1aWxkZXJDb25maWd1cmF0aW9uPzogRm9ybUJ1aWxkZXJDb25maWd1cmF0aW9uKTogUnhGb3JtR3JvdXAgfCBGb3JtR3JvdXAgfCBBcHBGb3JtR3JvdXA8VD47XHJcbn1cclxuIl19