import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export interface Coord {
    x: number;
    y: number;
}
export declare class NgxImageZoomComponent implements OnInit, OnChanges, OnDestroy {
    private renderer;
    private static readonly validZoomModes;
    zoomContainer: ElementRef;
    imageThumbnail: ElementRef;
    fullSizeImage: ElementRef;
    zoomScroll: EventEmitter<number>;
    zoomPosition: EventEmitter<Coord>;
    display: string;
    fullImageTop: number;
    fullImageLeft: number;
    magnifiedWidth: number;
    magnifiedHeight: number;
    lensTop: number;
    lensLeft: number;
    enableLens: boolean;
    lensBorderRadius: number;
    thumbImage: string;
    fullImage: string;
    thumbWidth: number;
    thumbHeight: number;
    fullWidth: number;
    fullHeight: number;
    lensWidth: number;
    lensHeight: number;
    private zoomMode;
    private magnification;
    private enableScrollZoom;
    private scrollStepSize;
    private circularLens;
    private baseRatio;
    private minZoomRatio;
    private maxZoomRatio;
    private xRatio;
    private yRatio;
    private offsetLeft;
    private offsetTop;
    private zoomingEnabled;
    private zoomFrozen;
    private isReady;
    private thumbImageLoaded;
    private fullImageLoaded;
    private latestMouseLeft;
    private latestMouseTop;
    private eventListeners;
    constructor(renderer: Renderer2);
    set setThumbImage(thumbImage: string);
    set setFullImage(fullImage: string);
    set setZoomMode(zoomMode: string);
    set setMagnification(magnification: number);
    set setMinZoomRatio(minZoomRatio: number);
    set setMaxZoomRatio(maxZoomRatio: number);
    set setScrollStepSize(stepSize: number);
    set setEnableLens(enable: boolean);
    set setLensWidth(width: number);
    set setLensHeight(height: number);
    set setCircularLens(enable: boolean);
    set setEnableScrollZoom(enable: boolean);
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    /**
     * Template helper methods
     */
    onThumbImageLoaded(): void;
    onFullImageLoaded(): void;
    private setUpEventListeners;
    private checkImagesLoaded;
    /**
     * Zoom position setters
     */
    private setZoomPosition;
    /**
     * Mouse wheel event
     */
    private onMouseWheel;
    /**
     * Hover mode
     */
    private hoverMouseEnter;
    private hoverMouseLeave;
    private hoverMouseMove;
    /**
     * Toggle mode
     */
    private toggleClick;
    /**
     * Click mode
     */
    private clickStarter;
    private clickMouseLeave;
    private clickMouseMove;
    /**
     * Hover freeze mode
     */
    private hoverFreezeMouseEnter;
    private hoverFreezeMouseLeave;
    private hoverFreezeMouseMove;
    private hoverFreezeClick;
    /**
     * Private helper methods
     */
    private zoomOn;
    private zoomOff;
    private calculateZoomPosition;
    private calculateImageAndLensPosition;
    private calculateRatioAndOffset;
    private calculateRatio;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxImageZoomComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxImageZoomComponent, "lib-ngx-image-zoom", never, { "setThumbImage": "thumbImage"; "setFullImage": "fullImage"; "setZoomMode": "zoomMode"; "setMagnification": "magnification"; "setMinZoomRatio": "minZoomRatio"; "setMaxZoomRatio": "maxZoomRatio"; "setScrollStepSize": "scrollStepSize"; "setEnableLens": "enableLens"; "setLensWidth": "lensWidth"; "setLensHeight": "lensHeight"; "setCircularLens": "circularLens"; "setEnableScrollZoom": "enableScrollZoom"; }, { "zoomScroll": "zoomScroll"; "zoomPosition": "zoomPosition"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltYWdlLXpvb20uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC1pbWFnZS16b29tLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29vcmQge1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neEltYWdlWm9vbUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IHZhbGlkWm9vbU1vZGVzO1xyXG4gICAgem9vbUNvbnRhaW5lcjogRWxlbWVudFJlZjtcclxuICAgIGltYWdlVGh1bWJuYWlsOiBFbGVtZW50UmVmO1xyXG4gICAgZnVsbFNpemVJbWFnZTogRWxlbWVudFJlZjtcclxuICAgIHpvb21TY3JvbGw6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xyXG4gICAgem9vbVBvc2l0aW9uOiBFdmVudEVtaXR0ZXI8Q29vcmQ+O1xyXG4gICAgZGlzcGxheTogc3RyaW5nO1xyXG4gICAgZnVsbEltYWdlVG9wOiBudW1iZXI7XHJcbiAgICBmdWxsSW1hZ2VMZWZ0OiBudW1iZXI7XHJcbiAgICBtYWduaWZpZWRXaWR0aDogbnVtYmVyO1xyXG4gICAgbWFnbmlmaWVkSGVpZ2h0OiBudW1iZXI7XHJcbiAgICBsZW5zVG9wOiBudW1iZXI7XHJcbiAgICBsZW5zTGVmdDogbnVtYmVyO1xyXG4gICAgZW5hYmxlTGVuczogYm9vbGVhbjtcclxuICAgIGxlbnNCb3JkZXJSYWRpdXM6IG51bWJlcjtcclxuICAgIHRodW1iSW1hZ2U6IHN0cmluZztcclxuICAgIGZ1bGxJbWFnZTogc3RyaW5nO1xyXG4gICAgdGh1bWJXaWR0aDogbnVtYmVyO1xyXG4gICAgdGh1bWJIZWlnaHQ6IG51bWJlcjtcclxuICAgIGZ1bGxXaWR0aDogbnVtYmVyO1xyXG4gICAgZnVsbEhlaWdodDogbnVtYmVyO1xyXG4gICAgbGVuc1dpZHRoOiBudW1iZXI7XHJcbiAgICBsZW5zSGVpZ2h0OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHpvb21Nb2RlO1xyXG4gICAgcHJpdmF0ZSBtYWduaWZpY2F0aW9uO1xyXG4gICAgcHJpdmF0ZSBlbmFibGVTY3JvbGxab29tO1xyXG4gICAgcHJpdmF0ZSBzY3JvbGxTdGVwU2l6ZTtcclxuICAgIHByaXZhdGUgY2lyY3VsYXJMZW5zO1xyXG4gICAgcHJpdmF0ZSBiYXNlUmF0aW87XHJcbiAgICBwcml2YXRlIG1pblpvb21SYXRpbztcclxuICAgIHByaXZhdGUgbWF4Wm9vbVJhdGlvO1xyXG4gICAgcHJpdmF0ZSB4UmF0aW87XHJcbiAgICBwcml2YXRlIHlSYXRpbztcclxuICAgIHByaXZhdGUgb2Zmc2V0TGVmdDtcclxuICAgIHByaXZhdGUgb2Zmc2V0VG9wO1xyXG4gICAgcHJpdmF0ZSB6b29taW5nRW5hYmxlZDtcclxuICAgIHByaXZhdGUgem9vbUZyb3plbjtcclxuICAgIHByaXZhdGUgaXNSZWFkeTtcclxuICAgIHByaXZhdGUgdGh1bWJJbWFnZUxvYWRlZDtcclxuICAgIHByaXZhdGUgZnVsbEltYWdlTG9hZGVkO1xyXG4gICAgcHJpdmF0ZSBsYXRlc3RNb3VzZUxlZnQ7XHJcbiAgICBwcml2YXRlIGxhdGVzdE1vdXNlVG9wO1xyXG4gICAgcHJpdmF0ZSBldmVudExpc3RlbmVycztcclxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xyXG4gICAgc2V0IHNldFRodW1iSW1hZ2UodGh1bWJJbWFnZTogc3RyaW5nKTtcclxuICAgIHNldCBzZXRGdWxsSW1hZ2UoZnVsbEltYWdlOiBzdHJpbmcpO1xyXG4gICAgc2V0IHNldFpvb21Nb2RlKHpvb21Nb2RlOiBzdHJpbmcpO1xyXG4gICAgc2V0IHNldE1hZ25pZmljYXRpb24obWFnbmlmaWNhdGlvbjogbnVtYmVyKTtcclxuICAgIHNldCBzZXRNaW5ab29tUmF0aW8obWluWm9vbVJhdGlvOiBudW1iZXIpO1xyXG4gICAgc2V0IHNldE1heFpvb21SYXRpbyhtYXhab29tUmF0aW86IG51bWJlcik7XHJcbiAgICBzZXQgc2V0U2Nyb2xsU3RlcFNpemUoc3RlcFNpemU6IG51bWJlcik7XHJcbiAgICBzZXQgc2V0RW5hYmxlTGVucyhlbmFibGU6IGJvb2xlYW4pO1xyXG4gICAgc2V0IHNldExlbnNXaWR0aCh3aWR0aDogbnVtYmVyKTtcclxuICAgIHNldCBzZXRMZW5zSGVpZ2h0KGhlaWdodDogbnVtYmVyKTtcclxuICAgIHNldCBzZXRDaXJjdWxhckxlbnMoZW5hYmxlOiBib29sZWFuKTtcclxuICAgIHNldCBzZXRFbmFibGVTY3JvbGxab29tKGVuYWJsZTogYm9vbGVhbik7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFRlbXBsYXRlIGhlbHBlciBtZXRob2RzXHJcbiAgICAgKi9cclxuICAgIG9uVGh1bWJJbWFnZUxvYWRlZCgpOiB2b2lkO1xyXG4gICAgb25GdWxsSW1hZ2VMb2FkZWQoKTogdm9pZDtcclxuICAgIHByaXZhdGUgc2V0VXBFdmVudExpc3RlbmVycztcclxuICAgIHByaXZhdGUgY2hlY2tJbWFnZXNMb2FkZWQ7XHJcbiAgICAvKipcclxuICAgICAqIFpvb20gcG9zaXRpb24gc2V0dGVyc1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNldFpvb21Qb3NpdGlvbjtcclxuICAgIC8qKlxyXG4gICAgICogTW91c2Ugd2hlZWwgZXZlbnRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbk1vdXNlV2hlZWw7XHJcbiAgICAvKipcclxuICAgICAqIEhvdmVyIG1vZGVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBob3Zlck1vdXNlRW50ZXI7XHJcbiAgICBwcml2YXRlIGhvdmVyTW91c2VMZWF2ZTtcclxuICAgIHByaXZhdGUgaG92ZXJNb3VzZU1vdmU7XHJcbiAgICAvKipcclxuICAgICAqIFRvZ2dsZSBtb2RlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgdG9nZ2xlQ2xpY2s7XHJcbiAgICAvKipcclxuICAgICAqIENsaWNrIG1vZGVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjbGlja1N0YXJ0ZXI7XHJcbiAgICBwcml2YXRlIGNsaWNrTW91c2VMZWF2ZTtcclxuICAgIHByaXZhdGUgY2xpY2tNb3VzZU1vdmU7XHJcbiAgICAvKipcclxuICAgICAqIEhvdmVyIGZyZWV6ZSBtb2RlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaG92ZXJGcmVlemVNb3VzZUVudGVyO1xyXG4gICAgcHJpdmF0ZSBob3ZlckZyZWV6ZU1vdXNlTGVhdmU7XHJcbiAgICBwcml2YXRlIGhvdmVyRnJlZXplTW91c2VNb3ZlO1xyXG4gICAgcHJpdmF0ZSBob3ZlckZyZWV6ZUNsaWNrO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcml2YXRlIGhlbHBlciBtZXRob2RzXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgem9vbU9uO1xyXG4gICAgcHJpdmF0ZSB6b29tT2ZmO1xyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVab29tUG9zaXRpb247XHJcbiAgICBwcml2YXRlIGNhbGN1bGF0ZUltYWdlQW5kTGVuc1Bvc2l0aW9uO1xyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVSYXRpb0FuZE9mZnNldDtcclxuICAgIHByaXZhdGUgY2FsY3VsYXRlUmF0aW87XHJcbn1cclxuIl19